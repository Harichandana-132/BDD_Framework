package testBase;



import java.io.File;
import java.io.FileReader;
import java.io.IOException;
import java.text.SimpleDateFormat;
import java.time.Duration;
import java.util.Date;
import java.util.Properties;

import org.apache.commons.lang3.RandomStringUtils;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import org.openqa.selenium.OutputType;
import org.openqa.selenium.Platform;
import org.openqa.selenium.TakesScreenshot;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.chrome.ChromeDriver;
import org.openqa.selenium.edge.EdgeDriver;
import org.openqa.selenium.firefox.FirefoxDriver;
import org.openqa.selenium.remote.DesiredCapabilities;
import org.testng.annotations.AfterClass;
import org.testng.annotations.BeforeClass;
import org.testng.annotations.Parameters;

public class BaseClass 
{
	
	public static WebDriver driver;
    public Logger logger;
    public Properties p;
	
	@BeforeClass(groups={"Sanity","Regression","Master","DataDriven"})
	@Parameters({"os","browser"})
	public void setup(String os,String br) throws IOException
	{
		//loading conig.properties file
		FileReader file=new FileReader("./src//main//resources//config.properties");
		p=new Properties();
		p.load(file);
		
	    logger=LogManager.getLogger(this.getClass()); //log4j2
	    if(p.getProperty("execution_env").equalsIgnoreCase("remote")	
	    		{
	    	       DesiredCapabilities capabilities=new DesiredCapabilities();
	    	       if(os.equalsIgnoreCase("windows"))
	    	       {
	    	       capabilities.setPlatform(Platform.WIN10);
	    	       }
	    	       else
	    	       {
	    	    	   capabilities.setPlatform(Platform.MAC);
	    	       }
	    	       capabilities.setBrowserName("chrome");
	    		}
	    		
	    		
	    		switch(br.toLowerCase())
	    {
	    case "chrome":driver=new ChromeDriver(); break;
	    case "edge":driver=new EdgeDriver();break;
	    case "firefox":driver=new FirefoxDriver();break;
	    default:System.out.println("invalid browser");return;
	    }
		
		driver.manage().deleteAllCookies();
		driver.manage().timeouts().implicitlyWait(Duration.ofSeconds(10));
		driver.get(p.getProperty("appURL")); //reading url from properties file
		driver.manage().window().maximize();
	}
	@AfterClass(groups= {"Sanity","Regression","Master"})
	public void teardown()
	{
		driver.quit();
		
	}
	public String randomString()
	{
	String generatedstring=	RandomStringUtils.randomAlphabetic(5);
	return generatedstring;
	}
	public String randomnumber()
	{
	String genertedstring=	RandomStringUtils.randomNumeric(10);
	return genertedstring;
	}
	public String randomalphaNumeric()
	{
	String generatedstring=	RandomStringUtils.randomAlphabetic(3);
	String generatednumber= RandomStringUtils.randomNumeric(5);
	return(generatedstring+generatednumber);
	}
	public String captureScreen(String tname)
	{
		String timestamp=new SimpleDateFormat("yyyyMMddhhmmss").format(new Date());
		TakesScreenshot takesscreenshot=(TakesScreenshot)driver;
		File sourcefile=takesscreenshot.getScreenshotAs(OutputType.FILE);
		String targetfile=System.getProperty("user-dir")+"\\screenshots\\"+ tname +"_"+timestamp;
		sourcefile.renameTo(sourcefile);
		return targetfile;
		
	}
}























